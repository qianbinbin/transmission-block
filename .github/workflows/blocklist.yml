name: Generate P2P Blocklists

on:
  schedule:
    - cron: '0,30 * * * *'
  workflow_dispatch:

jobs:
  generate:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      TARGET_BRANCH: blocklist
      README: README.md
      README_TMP: .README.md
    steps:
      - name: Install dependences
        run: |
          sudo apt-get update
          sudo apt-get install iprange
          sudo apt-get install ipcalc-ng

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if git show-ref --quiet "refs/remotes/origin/$TARGET_BRANCH"; then
            git checkout "$TARGET_BRANCH"
          else
            git checkout --orphan "$TARGET_BRANCH"
            git reset --hard
          fi
          git restore --source master ip-to-p2p.sh
          {
            echo "# P2P Blocklists"
            echo ""
            echo "The blocklists have been converted to a Transmission-compatible P2P plaintext format,"
            echo "using [$GITHUB_REPOSITORY]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY) under MIT License."
            echo ""
          } >"$README_TMP"

      - name: Generate all@BTN-Collected-Rules
        env:
          SRC: "[PBH-BTN/BTN-Collected-Rules](https://github.com/PBH-BTN/BTN-Collected-Rules)"
          SRC_LICENSE: "[CC-BY 4.0](https://creativecommons.org/licenses/by/4.0/deed.zh-hans)"
          SRC_URL: https://raw.githubusercontent.com/PBH-BTN/BTN-Collected-Rules/main/combine/all.txt
          DEST_NAME: all@BTN-Collected-Rules
          DEST_PREFIX: btn-all
        run: |
          md=$(sed -n "/^## $DEST_NAME$/,/^## /p" "$README" 2>/dev/null) || true
          etag=$(echo "$md" | sed -n -E 's/^Etag: (.*)$/\1/p')
          updated=$(echo "$md" | sed -n -E 's/^Updated: (.*)$/\1/p')

          new_etag=$(curl -fsSL -I "$SRC_URL" | grep -i '^etag: ' | cut -c 7- | tr -d '\r')
          if [ -z "$new_etag" ]; then
            echo "Could not fetch Etag."
            # Exit with error if fail for the first time
            [ -n "$etag" ] || exit 1
          elif [ "$new_etag" = "$etag" ]; then
            echo "Already up to date."
          fi

          if [ -n "$new_etag" ] && [ "$new_etag" != "$etag" ]; then
            if ./ip-to-p2p.sh --desc "$DEST_NAME" --prefix "./$DEST_PREFIX" \
              --ip-version all --ip-version 4 "$SRC_URL"; then
              etag="$new_etag"
              updated=$(TZ=Asia/Shanghai date +"%Y-%m-%d %H:%M %z")
            else
              echo "Could not generate."
              [ -n "$etag" ] || exit 1
            fi
          fi

          {
            echo "## $DEST_NAME"
            echo ""
            echo "[![$DEST_NAME](https://img.shields.io/date/$(date -d "$updated" +%s)?label=$DEST_NAME)](https://github.com/$GITHUB_REPOSITORY/blob/$TARGET_BRANCH/$DEST_PREFIX.p2p)"
            echo ""
            echo "Source: $SRC under $SRC_LICENSE License"
            echo ""
            echo "Etag: $etag"
            echo ""
            echo "Updated: $updated"
            echo ""
            echo "- URL: <https://raw.githubusercontent.com/$GITHUB_REPOSITORY/$TARGET_BRANCH/$DEST_PREFIX.p2p>"
            echo "- Cloudflare: <https://blocklist.binac.org/$DEST_PREFIX.p2p>"
            echo "- jsDelivr: <https://cdn.jsdelivr.net/gh/$GITHUB_REPOSITORY@$TARGET_BRANCH/$DEST_PREFIX.p2p>"
            echo "- URL (IPv4): <https://raw.githubusercontent.com/$GITHUB_REPOSITORY/$TARGET_BRANCH/$DEST_PREFIX-ipv4.p2p>"
            echo "- Cloudflare (IPv4): <https://blocklist.binac.org/$DEST_PREFIX-ipv4.p2p>"
            echo "- jsDelivr (IPv4): <https://cdn.jsdelivr.net/gh/$GITHUB_REPOSITORY@$TARGET_BRANCH/$DEST_PREFIX-ipv4.p2p>"
          } >>"$README_TMP"

      - name: Generate Issue 9
        env:
          SRC: "[transmission-block Issue #9](https://github.com/qianbinbin/transmission-block/issues/9)"
          SRC_URL: https://api.github.com/repos/qianbinbin/transmission-block/issues/9/comments
          DEST_NAME: Issue9
          DEST_PREFIX: issue9
        run: |
          # Etag doesn't work for GitHub API Endpoint
          curl_gh_api() {
            curl -fsSL \
              -H 'Accept: application/vnd.github+json' \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H 'X-GitHub-Api-Version: 2022-11-28' "$@"
          }
          get_rules() {
            url="$1"
            while [ -n "$url" ]; do
              headers=$(curl_gh_api -I "$1") || return 1
              url=$(echo "$headers" | sed -n -E 's/.*<([^>]*)>; rel="next".*/\1/p')
              content=$(curl_gh_api "$1") || return 1
              comments=$(printf '%s\n' "$content" | jq -r '.[] | select(.author_association == "OWNER").body')
              echo "$comments" | sed -n -E 's/^> rule: (.*$)/\1/p'
            done
          }

          updated=$(sed -n "/^## $DEST_NAME$/,/^## /p" "$README" 2>/dev/null | sed -n -E 's/^Updated: (.*)$/\1/p')
          if rules=$(get_rules "$SRC_URL"); then
            RE_P2P='^[^:]*:[0-9a-fA-F\.:]+-[0-9a-fA-F\.:]+$'
            RE_P2P_IPV4='^[^:]*:[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}-[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}'
            echo "$rules" | { grep -o -E "$RE_P2P" || true; } >"./$DEST_PREFIX.p2p"
            echo "$rules" | { grep -o -E "$RE_P2P_IPV4" || true; } >"./$DEST_PREFIX-ipv4.p2p"
            # git diff --quiet "./$DEST_PREFIX"*  <-- doesn't work for untracked files
            if [ -n "$(git status --porcelain "./$DEST_PREFIX"*)" ]; then
              # echo | wc -l  <-- wrong for empty string
              echo "Found $(wc -l "./$DEST_PREFIX.p2p" | awk '{ print $1 }') rules."
              updated=$(TZ=Asia/Shanghai date +"%Y-%m-%d %H:%M %z")
            else
              echo "Already up to date."
            fi
          else
            echo "Could not get the rules."
            [ -n "$updated" ] || exit 1
          fi

          {
            echo ""
            echo "## $DEST_NAME"
            echo ""
            echo "[![$DEST_NAME](https://img.shields.io/date/$(date -d "$updated" +%s)?label=$DEST_NAME)](https://github.com/$GITHUB_REPOSITORY/blob/$TARGET_BRANCH/$DEST_PREFIX.p2p)"
            echo ""
            echo "Source: $SRC"
            echo ""
            echo "Updated: $updated"
            echo ""
            echo "- URL: <https://raw.githubusercontent.com/$GITHUB_REPOSITORY/$TARGET_BRANCH/$DEST_PREFIX.p2p>"
            echo "- Cloudflare: <https://blocklist.binac.org/$DEST_PREFIX.p2p>"
            echo "- jsDelivr: <https://cdn.jsdelivr.net/gh/$GITHUB_REPOSITORY@$TARGET_BRANCH/$DEST_PREFIX.p2p>"
            echo "- URL (IPv4): <https://raw.githubusercontent.com/$GITHUB_REPOSITORY/$TARGET_BRANCH/$DEST_PREFIX-ipv4.p2p>"
            echo "- Cloudflare (IPv4): <https://blocklist.binac.org/$DEST_PREFIX-ipv4.p2p>"
            echo "- jsDelivr (IPv4): <https://cdn.jsdelivr.net/gh/$GITHUB_REPOSITORY@$TARGET_BRANCH/$DEST_PREFIX-ipv4.p2p>"
          } >>"$README_TMP"

      - name: Commit
        run: |
          mv "$README_TMP" "$README"
          git add ./*.p2p* "$README"
          if git diff-index --quiet HEAD 2>/dev/null; then
            echo "Nothing to commit."
            exit
          fi
          if git show-ref --quiet --branches "$TARGET_BRANCH"; then
            git checkout --orphan "$TARGET_BRANCH-tmp"
            git branch -D "$TARGET_BRANCH"
            git branch -m "$TARGET_BRANCH"
            # git gc --aggressive --prune=all
          fi
          git commit -m "Generate blocklists"
          git push -f -u origin "$TARGET_BRANCH"
